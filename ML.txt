# Check the versions of libraries
 # Python version
import sys
print ('python: {}'.format(sys.version))
# scipy
import scipy
print ('scipy: {}'.format(scipy.__version__))
 # numpy
import numpy
print ('numpy: {}'.format(numpy.__version__))
# matplotlib
import matplotlib
print ('matplotlib: {}'.format(matplotlib.__version__))
 # pandas
import pandas
print ('pandas: {}'.format(pandas.__version__))
 # scikit-learn
import sklearn
print ('sklearn: {}'.format(sklearn.__version__))



# Load libraries
import pandas
from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt
from sklearn import model_selection
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC


url="https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
names =['sepal-length','sepal-width','petal-length', 'petal-width','class']
dataset = pandas.read_csv(url,names=names)


print(dataset.shape)  #this will gives total number of columns and rows


print(dataset.head(30)) # this will print first 30 rows


print(dataset.describe()) #summary of each attribute


print(dataset.groupby('class').size())  #describes number of instances in each class


#for visualization we are going to create two types of plot
# 1.Univariant plot
#2.Multivariant plot


dataset.plot(kind='box' ,subplots=True, layout = (2,2) , sharex=False , sharey=False)
plt.show()


dataset.hist()
plt.show()


scatter_matrix(dataset)
plt.show()

#After knowing everything about our dataset now we are
#creating a validation dataset - Training dataset



# we are going to split our dataset into two parts 
# first 80% is going to train our model
# next 20% is going to validate our model


array=dataset.values
X=array[:,0:4]
Y=array[:,4]
validation_size=0.20
seed=6
X_train,X_test,Y_train,Y_test=model_selection.train_test_split(X,Y,test_size = validation_size,random_state=seed)


#creating test harness
#it will split our dataset into ten parts 
#train on 9 parts and test on 10th part

seed=6
scoring='accuracy'



# Spot Check Algorithms
models = []
models.append(('LR', LogisticRegression ()))
models.append(('LDA', LinearDiscriminantAnalysis ()))
models.append (('KNN', KNeighborsClassifier()))
models.append (('CART',DecisionTreeClassifier()))
models.append(('NB', GaussianNB ()))
models.append(('SVM', SVC()))
# evaluate each model in turn
results=[]
names = []
for name, model in models:
    kfold = model_selection.KFold(n_splits=10, shuffle=True, random_state=seed)
    cv_results = model_selection.cross_val_score(model, X_train, Y_train, cv=kfold, scoring=scoring)
    results.append(cv_results)
    names.append(name)
    msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
    print(msg)